---
title: "Day 2 interactive Lessons"
format: html
editor: visual
execute:
  warning: false
---

```{r}
library(tidyverse)
library(dplyr)
```

# Making & indexing data in R

### Vectors

Making Vectors

```{r}
goodbois <- c("teddy", "tango", "heidi", "coco", "baidi", "fudo")

#check class of goodbois
typeof(goodbois)
class(goodbois)

```

```{r}
my_breakfast <- c("coffee", 2, TRUE, "raisinbran")
typeof(my_breakfast)
class(my_breakfast)

```

```{r}
weights <- c(50L, 60L, 25L, 35L, 55L)
typeof(weights)
class(weights)
```

```{r}
is.numeric(weights)
```

```{r}
zipcodes <- c(93105, 93514, 93101, 93401)

class(zipcodes)


# Use as. family of functions to recast data classes
# Use is. family of functions to ASK what class something is
zipcodes_chr <- as.character(zipcodes)


```

```{r}
dog_food <- c(teddy = "purina", khora= "alpo", waffle="fancy feast", banjo = "blue diamond", tallie = "farmer's dog")
class(dog_food)
test <- c(cat = 4, dog = 10, elephant = 11)
class(test)


dog_food[1]
#R USES A 1-INDEX. PYTHON & JAVASCRIPT USES A 0-INDEX#
```

access ranges of values in a vector

Use: to refer to a range (low : high)

```{r}
trees <- c("ponderosa", "lodgepole", "jeffrey", "sugar", "white", "bristle cone")
trees[3]
trees[3:5]
```

## Warm-up for Loops

```{r}
i <- 4 #indexing helper
trees[4]

```

```{r}
count_trees <- length(trees)
i <- seq(1:count_trees) #same thing as seq(from=1, to=3)
trees[i] #gives every item in trees
```

```{r}
trees[3] <- "OAK"
```

```{r}
waffle <- list("dog", 21.5, "brown", 2L)
```

```{r}

fish_size <- matrix(c(0.8, 1.2,0.4,0.9), ncol=2, nrow=2, byrow=FALSE)

fish_size

class(fish_size)
str(fish_size)
typeof(fish_size) #tells you within the data structure the data type for the different values 
fish_size[2,2]
fish_size[,2]
#change333
```

An edit!

# Lists 

#1-D data structure of the same class

```{r}
urchins <- list("blue", c(1, 2, 3), c("lunch, dinner, dessert"), 5L)
```

if you're indexing into a data structure, \[\] returns element, but retains data structure

```{r}
urchins_list <- urchins[2] #this returns a list
urchins_vector <- urchins[[2]]#this returns a vector
sample1 <- c(1,2,3,4,5,6,7,8)
sample2 <- c(3,4,1,5,6,7,8,9)

ttest_example <- t.test(sample1, sample2)
ttest_example

class(ttest_example)
```

the p.value of this t-test is `` `r ttest_example$p.value` ``

## Data frames 

```{r}
fruit <- data.frame(type = c("apple","banana","peach"), mass = c(130,195,150))
class(fruit)
fruit[3,2]

purrr::pluck(fruit,"type", 2 ) ## a way to index data structures. potentially more linear than traditional methods 

starwars$starships[[1]][2]
purrr::pluck(starwars, "starships", 1, 2)
```

```{r}
class(starwars$starships[1])
class(starwars$starships[[1]])
```
